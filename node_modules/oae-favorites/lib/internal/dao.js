var _ = require('underscore');
var ShortId = require('shortid');

var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var OaeUtil = require('oae-util/lib/util');
var TenantsAPI = require('oae-tenants');
var ContentAPI = require('oae-content');
var LibraryAPI = require('oae-library');

var ContentDAO = require('oae-content/lib/internal/dao.content.js');
var PrincipalDAO = require('oae-principals/lib/internal/dao.js');

var Favorites = require('oae-favorites/lib/model').Favorites;
var FavoritesConstants = require('../constants').FavoritesConstants;

/**
 * Add to the libraries of a principal.
 *
 * @param  {String}    	idPrincipal                 Id of the principal
 * @param  {String}  	idResource                  Id of the resource to add to the favorites list
 * @param  {Function}   [callback]                  Standard callback function
 * @param  {Object}     [callback.err]              Error object containing the error message
 * @param  {Content}    [callback.newContentObj]    The content object with the updated `lastModified` field. Note that this may be returned even if there is an error as the content-update operation may have succeeded but the library-update operation fails.
 */
var addToFavorites = module.exports.addToFavorites = function(idPrincipal, idResource , callback) {

	// Verify if the resource is already in the user favorites
	_isInFavorites(idPrincipal, idResource, function(err, result){
		if (err) {
			return callback(err);
		}

		if (!result) {
			// Create the favorite
		    Cassandra.runQuery('INSERT INTO "Favorites" ("idPrincipal", "idResource", "favorite") VALUES (?, ?, ?)', [idPrincipal, idResource, 'true'], function(err) {
		        if (err) {
		            return callback(err);
		        }

		        // Return content
		        ContentDAO.getContent(idResource, function(err, resource){
		    		if (err) {
		    			return callback(err);
		    		}		    		
		    		return callback(null, resource);
		        });
			});
		} else {
			var err = {};
	        err.code = '400';
	        err.msg = 'This content is already in the favorites library';
			return callback(err);
		}
	});
};

/**
 * Internal function that verify if the element is in the favorites user library.
 *
 * @param  {String}    	idMember          	Id of the principal
 * @param  {String}     idResource     		The resource to add in favorites
 * @param  {Function}   [callback]          Standard callback function
 * @param  {Object}     [callback.err]      Error object containing the error message
 */
var _isInFavorites = function(idMember, idResource, callback) {
	// Get all the favorite element from a principal
	Cassandra.runQuery('SELECT * FROM "Favorites" WHERE "idPrincipal" = ? AND "idResource" = ?', [idMember, idResource], function (err, result) {
		if (err) {
			return callback(err);
		}

        if (_.chain(result).map(Cassandra.rowToHash)._wrapped[0]) {
        	return callback(null, true);
        } else {
        	return callback(null, false);
        }
    });
};

/**
 * Get a user's content favorites
 *
 * @param  {String}    		idPrincipal         Id of the principal
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Content[]}      callback.content    Array of basic content profiles representing the requested items in the library
 * @param  {String}         callback.nextToken  The value to use for the `start` parameter to get the next set of results
 */
var getFavorites = module.exports.getFavorites = function(principalId, callback) {
	// Get all the favorites element from a principal
    Cassandra.runQuery('SELECT * FROM "Favorites" WHERE "idPrincipal" = ?', [principalId], function (err, results) {
		if (err) {
			return callback(err);
		}
		var results = _.chain(results).map(Cassandra.rowToHash)._wrapped;
		var contentIds = [];

        _.each(results, function(result){
        	contentIds.push(result.idResource);
        })

        ContentDAO.getMultipleContentItems(contentIds, null, function(err, contentItems) {
            if (err) {
                return callback(err);
            }
            contentItems = _.compact(contentItems);
            return callback(null, contentItems);
        });
    });
};

/**
 * Remove the element to the BDD
 *
 * @param  {String}    	idPrincipal                 Id of the principal
 * @param  {String}  	idResource                  Id of the resource to add to the favorites list
 * @param  {Function}   [callback]                  Standard callback function
 * @param  {Object}     [callback.err]              Error object containing the error message
 * @param  {Content}    [callback.newContentObj]    The content object with the updated `lastModified` field. Note that this may be returned even if there is an error as the content-update operation may have succeeded but the library-update operation fails.
 */
var removeFavorite = module.exports.removeFavorite = function(idPrincipal, idResource , callback) {
	// Delete the element from a principal
    Cassandra.runQuery('DELETE FROM "Favorites" WHERE "idPrincipal" = ? AND "idResource" = ?', [idPrincipal, idResource], function(err) {
        if (err) {
            return callback(err);
        }
        return callback(null);
	});
};
