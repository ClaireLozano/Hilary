/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var log = require('oae-logger').logger('oae-jitsi-rest');
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var FavoritesAPI = require('oae-favorites');

/**
 * @REST getMeetingLibraryPrincipalId
 *
 * Get the meetings library items for a user or group
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /meeting-jitsi/library/{principalId}
 * @PathParam   {string}                principalId         The id of the principal whose meeting library to fetch
 * @QueryParam  {number}                [limit]             The maximum number of results to return. Default: 10
 * @QueryParam  {string}                [start]             The meeting paging token from which to start fetching meetings
 * @Return      {MeetingsLibrary}                           The meetings library items for the specified user or group
 * @HttpResponse                        200                 Meeting library available
 * @HttpResponse                        400                 A user or group id must be provided
 * @HttpResponse                        401                 You do not have have access to this library
 */
OAE.tenantRouter.on('get', '/api/favorites/library/:principalId', function(req, res) {
    var limit = OaeUtil.getNumberParam(12, 12, 1, 25);
    FavoritesAPI.getFavoritesLibraryItems(req.ctx, req.params.principalId, req.query.start, limit, function(err, favorites, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, {'results': favorites, 'nextToken': nextToken});
    });

});

/**
 * @REST addToFavorites 
 *
 * Get transfer
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /transfer/getTransferById/:idUserOrigin
 * @FormParam   {Context}           ctx                 Context
 * @FormParam   {string}            idUserOrigin        The id of the user who created the transfer               
 * @Return      {transfer}                              The created transfer
 * @HttpResponse                    200                 Transfer created
 * @HttpResponse                    400                 Transfer not found
 */
OAE.tenantRouter.on('post', '/api/favorites/addToFavorites/', function (req, res) {

    FavoritesAPI.addToFavorites(req.ctx, req.body.idPrincipal, req.body.idResources, function (err, resources) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        return res.send(200, resources);
    });
});

/**
 * @REST removeFavorite 
 *
 * Get transfer
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /transfer/getTransferById/:idUserOrigin
 * @FormParam   {Context}           ctx                 Context
 * @FormParam   {string}            idUserOrigin        The id of the user who created the transfer               
 * @Return      {transfer}                              The created transfer
 * @HttpResponse                    200                 Transfer created
 * @HttpResponse                    400                 Transfer not found
 */
OAE.tenantRouter.on('post', '/api/favorites/removeFavorite/', function (req, res) {

    FavoritesAPI.removeFavorite(req.ctx, req.body.idPrincipal, req.body.resources, function (err, resource) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        return res.send(200, resource);
    });
});
