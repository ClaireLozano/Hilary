var _ = require('underscore');

var LibraryAPI = require('oae-library');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsUtil = require('oae-principals/lib/util');
var ContentDAO = require('oae-content/lib/internal/dao.content');
var Validator = require('oae-authz/lib/validator').Validator;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var ContentUtil = require('oae-content/lib/internal/util');
var EmitterAPI = require('oae-emitter');

var FavoritesAPI = require('oae-favorites');
var FavoritesDAO = require('./internal/dao');
var FavoritesConstants = require('./constants').FavoritesConstants;

var ContentAPI = module.exports = new EmitterAPI.EventEmitter();


/**
 * PUBLIC FUNCTIONS
 */

/**
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}         principalId         The id of the principal 
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Content[]}      callback.content    The content library items for the specified user or group
 * @param  {String}         callback.nextToken  The value to provide in the `start` parameter to get the next set of results
 */
var getFavorites = module.exports.getFavorites = function(ctx, principalId, callback) {
    var validator = new Validator();
    validator.check(principalId, {'code': 400, 'msg': 'A user or group id must be provided'}).isPrincipalId();

    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    FavoritesDAO.getFavorites(principalId, function(err, favorites) {
        if (err){
            return callback(err);
        }
        return callback(null, favorites);
    });
};

/**
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}         principalId         The id of the principal 
 * @param  {String}         idResources         The id of the resource
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Content[]}      callback.content    The content library items for the specified user or group
 * @param  {String}         callback.nextToken  The value to provide in the `start` parameter to get the next set of results
 */
var addToFavorites = module.exports.addToFavorites = function(ctx, principalId, idResources , callback) {

    callback = callback || function() {};

    // Check if the link property is present. All other validation will be done in the _createContent function
    var validator = new Validator();
    validator.check(principalId, {'code': 400, 'msg': 'A valid id must be provided'}).notEmpty();
    validator.check(idResources, {'code': 400, 'msg': 'Resources must be provided'}).notEmpty();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to insert content into favorite library'}).isLoggedInUser(ctx);
    
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }	

    FavoritesList = [];

    if(typeof(idResources) == 'string'){
    	FavoritesDAO.addToFavorites(principalId, [idResources], function(err, favorites){
	    	if(err){
	    		return callback(err);
	    	}
	        return callback(null, [favorites]);
	    });
    } else {
    	_.each(idResources, function(resource){

		    FavoritesDAO.addToFavorites(principalId, resource, function(err, favorites){
		    	if(err){
		    		return callback(err);
		    	}

		    	FavoritesList.push(favorites);

		        // If last element, return 
	        	if (FavoritesList.length === idResources.length){ 
		            return callback(null, FavoritesList);
		        }
		    });
	    }); 
    }
};

/**
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}         principalId         The id of the principal 
 * @param  {String}         idResources         The id of the resource
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Content[]}      callback.content    The content library items for the specified user or group
 * @param  {String}         callback.nextToken  The value to provide in the `start` parameter to get the next set of results
 */
var removeFavorite = module.exports.removeFavorite = function(ctx, principalId, idResources , callback) {

    callback = callback || function() {};

    // Check if the link property is present. All other validation will be done in the _createContent function
    var validator = new Validator();
    validator.check(principalId, {'code': 400, 'msg': 'A valid id must be provided'}).notEmpty();
    validator.check(idResources, {'code': 400, 'msg': 'Resources must be provided'}).notEmpty();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to insert content into favorite library'}).isLoggedInUser(ctx);
    
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }	

    FavoritesList = [];

    if(typeof(idResources) == 'string'){
	    FavoritesDAO.removeFavorite(principalId, [idResources], function(err, favorites){
	    	if(err){
	    		return callback(err);
	    	}
	     	return callback(null, FavoritesList);
	    });
    } else {
		_.each(idResources, function(resource) {
		    FavoritesDAO.removeFavorite(principalId, resource, function(err, favorites){
		    	if(err){
		    		return callback(err);
		    	}

		    	FavoritesList.push(favorites);

		    	// If last element, return 
		        if (FavoritesList.length === idResources.length){ 
			     	return callback(null, FavoritesList);
			    }
		    });
	    });
    }
};
