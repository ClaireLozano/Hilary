var _ = require('underscore');

var LibraryAPI = require('oae-library');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsUtil = require('oae-principals/lib/util');
var ContentDAO = require('oae-content/lib/internal/dao.content');
var Validator = require('oae-authz/lib/validator').Validator;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var ContentUtil = require('oae-content/lib/internal/util');

var FavoritesAPI = require('oae-favorites');
var FavoritesDAO = require('./internal/dao');
var FavoritesConstants = require('./constants').FavoritesConstants;


/**
 * PUBLIC FUNCTIONS
 */

/**
 * Get the content library items for a user or group. If the user requests their own library or the library of a group they're a member of,
 * the full list will be returned. If the user is logged in but not a manager of the library, the :loggedin stream will be returned, containing
 * only content that's visible to logged in people or the public. In case of an anonymous user, the :public stream will be returned, containing
 * only content that is public
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}         principalId         The id of the principal whose content library to fetch
 * @param  {String}         start               The content paging token from which to start fetching content items. If not provided, the first x elements will be returned
 * @param  {Number}         limit               The maximum number of results to return. Default: 10
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Content[]}      callback.content    The content library items for the specified user or group
 * @param  {String}         callback.nextToken  The value to provide in the `start` parameter to get the next set of results
 */
var getFavoritesLibraryItems = module.exports.getFavoritesLibraryItems = function(ctx, principalId, start, limit, callback) {
    limit = OaeUtil.getNumberParam(limit, 10, 1);

    var validator = new Validator();
    validator.check(principalId, {'code': 400, 'msg': 'A user or group id must be provided'}).isPrincipalId();
    validator.check(limit, {'code': 400, 'msg': 'A valid limit should be passed in'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Get the principal
    PrincipalsDAO.getPrincipal(principalId, function(err, principal) {
        if (err) {
            return callback(err);
        }

        // Determine which library visibility we need to fetch
        LibraryAPI.Authz.resolveTargetLibraryAccess(ctx, principal.id, principal, function(err, hasAccess, visibility) {
            if (err) {
                return callback(err);
            } else if (!hasAccess) {
                return callback({'code': 401, 'msg': 'You do not have access to this library'});
            }

            FavoritesDAO.getFavoritesLibraryItems(principalId, visibility, start, limit, function(err, objects, nextToken) {
                if (err) {
                    return callback(err);
                }
                console.log(objects);

                _.each(objects, function(contentObj) {
                    ContentUtil.augmentContent(ctx, contentObj);
                });

                // Emit an event indicating that the content library has been retrieved
                //ContentAPI.emit(ContentConstants.events.GET_CONTENT_LIBRARY, ctx, principalId, visibility, start, limit, objects);

                return callback(null, objects, nextToken);
            });
        });
    });
};

/**
 * Get the content library items for a user or group. If the user requests their own library or the library of a group they're a member of,
 * the full list will be returned. If the user is logged in but not a manager of the library, the :loggedin stream will be returned, containing
 * only content that's visible to logged in people or the public. In case of an anonymous user, the :public stream will be returned, containing
 * only content that is public
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}         principalId         The id of the principal whose content library to fetch
 * @param  {String}         start               The content paging token from which to start fetching content items. If not provided, the first x elements will be returned
 * @param  {Number}         limit               The maximum number of results to return. Default: 10
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Content[]}      callback.content    The content library items for the specified user or group
 * @param  {String}         callback.nextToken  The value to provide in the `start` parameter to get the next set of results
 */
var addToFavorites = module.exports.addToFavorites = function(ctx, principalId, idResources , callback) {

    callback = callback || function() {};

    // Check if the link property is present. All other validation will be done in the _createContent function
    var validator = new Validator();
    validator.check(principalId, {'code': 400, 'msg': 'A valid id must be provided'}).notEmpty();
    validator.check(idResources, {'code': 400, 'msg': 'Resources must be provided'}).notEmpty();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to insert content into favorite library'}).isLoggedInUser(ctx);
    
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }	

    FavoritesList = [];

    idResources.forEach(function(resource){

	    FavoritesDAO.addToFavorites(principalId, resource, function(err, favorites){
	    	if(err){
	    		return callback(err);
	    	}

	    	FavoritesList.push(favorites);

	    	// If last element, return 
	        if (FavoritesList.length === idResources.length){ 
		     	return callback(null, FavoritesList);
		    }
			/*ContentAPI.emit(FavoritesConstants.events.CREATED_FAVORITE, ctx, content, revision, memberChangeInfo, folders, function(errs) {
	            if (errs) {
	                return callback(_.first(errs));
	            }*/

	        //});
	    });
    });

};
















